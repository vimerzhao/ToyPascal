package wci.backend;

import wci.intermediate.ICode;
import wci.intermediate.SymTab;
import wci.intermediate.SymTabStack;
import wci.message.*;

/**
 * <h1>Backend</h1>
 *
 * <p>The framework class that represents the back end component.</p>
 */
public abstract class Backend implements MessageProducer {
    protected static MessageHandler messageHandler;     // message handler delegate
    protected static SymTabStack symTabStack;           // symbol table stack
    static {
        messageHandler = new MessageHandler();
    }

    protected ICode iCode;    // intermediate code

    /**
     * Getter.
     * @return the intermediate code generated by this parser.
     */
    public ICode getICode() {
        return iCode;
    }

    /**
     * Getter.
     * @return the symbol table stack.
     */
    public SymTabStack getSymTabStack() {
        return symTabStack;
    }

    /**
     * Getter.
     * @return the message handler.
     */
    public MessageHandler getMessageHandler() {
        return messageHandler;
    }

    /**
     * Process the intermediate code and the symbol table generated by the
     * parser.  To be implemented by a compiler or an interpreter subclass.
     * @param iCode the intermediate code.
     * @param symTabStack the symbol table stack.
     * @throws Exception if an error occurred.
     */
    public abstract void process(ICode iCode, SymTabStack symTabStack) throws Exception;

    /**
     * Notify listeners after setting the message.
     * @param message the message to set.
     */
    @Override
    public void sendMessage(Message message) {
        messageHandler.sendMessage(message);
    }

    /**
     * Add a parser message listener.
     * @param listener the message listener to addimpl.
     */
    @Override
    public void addMessageListener(MessageListener listener) {
        messageHandler.addListener(listener);
    }

    /**
     * Remove a parser message listener.
     * @param listener the message listener to remove.
     */
    @Override
    public void removeMessageListener(MessageListener listener) {
        messageHandler.removeListener(listener);
    }
}
